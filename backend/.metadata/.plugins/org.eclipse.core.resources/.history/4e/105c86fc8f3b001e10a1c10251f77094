package com.controller;

import java.net.http.HttpRequest;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.entity.Account;
import com.entity.Orders;
import com.entity.Product;
import com.service.AccountService;
import com.service.OrdersService;
import com.service.ProductService;

@RestController
@RequestMapping("orders")
@CrossOrigin
public class OrdersController {

	@Autowired
	ProductService productService;
	@Autowired
	OrdersService ordersService;
	
	 @Autowired
	 AccountService accountService;
	
	 @PostMapping(value = "placeOrder", consumes = MediaType.APPLICATION_JSON_VALUE)
	 public String placeOrder(@RequestBody Orders order) {
	     String email = order.getEmailid(); // Assuming the email is provided in the JSON payload
	     Account account = accountService.findByEmail(email);

	     if (account == null) {
	         // Handle the case where the account is not found
	         return "Account not found";
	     }

	     order.setAccount(account);
	     order.setOrderplaced(LocalDate.now());
	     
	     Product product = productService.findById(order.getProductid()); // Assuming the JSON payload includes productid
	     if (product == null) {
	         // Handle the case where the product is not found
	         return "Product not found";
	     }

	     order.setProduct(product);
	     
	     String result = ordersService.placeOrder(order);
	     productService.decrementQty(product.getPid()); // Decrement quantity based on the product ID
	     return "viewProductsByCustomer";
	 }

	
	@RequestMapping(value = "/viewOrderDetails",method = RequestMethod.GET)
	public String viewOrder(Model mm, Orders oo) {
		List<Orders> listOfOrders = ordersService.viewAllOrderDetails();
		mm.addAttribute("orders", listOfOrders);
		return "viewOrder";
	}
}
